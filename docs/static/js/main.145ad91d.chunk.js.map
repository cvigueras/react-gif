{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAsBhD,OAGI,0BAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,IACdO,QAAQC,IAAI,mBAUZ,2BACIC,KAAK,OACLC,MAAUX,EACVY,SAzBc,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,Y,uBCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAClB,IAAD,EACI,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAcZM,GAdY,4CAAH,sDCIPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAIA,KCJHO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDd,SAAEA,GAC9B,MAE8BhB,mBACtB,CACIuB,KAAM,GACNa,SAAS,IALrB,mBAEWC,EAFX,KAEkBC,EAFlB,KA+BQ,OAlBAC,qBAAW,WAEP9B,QAAQC,IAAIM,GACZD,EAAQC,GACPwB,MAAM,SAAAC,GAECC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEf,UAIX,CAACpB,IAGGqB,ED7BqBM,CAAa3B,GAAjCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAEpB,OACI,oCACI,4BAAKpB,GACHoB,GAAW,uBAAGJ,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,kBAAC,EAAD,eACIkB,IAAQlB,EAAIC,IACRD,UEmBjBmB,EA/Ba,WAC3B,IAAD,EACwC7C,mBAAS,CAAC,cADlD,mBACW8C,EADX,KACuB/C,EADvB,KASI,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQ+C,EAAWrB,KAAI,SAAAT,GAAQ,OAEnB,kBAAC,EAAD,CACI4B,IAAQ5B,EACRA,SAAaA,UCxBzC+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.145ad91d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = (e) =>\r\n    {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2)\r\n        {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setinputValue('');\r\n            console.log('Submit hecho');\r\n        }\r\n    }\r\n        //inputValue contiene el ultimo valor siempre\r\n        //<h1>{ inputValue }</h1>\r\n\r\n    return (\r\n        \r\n        \r\n        <form onSubmit= {handleSubmit}>\r\n            <input\r\n                type=\"text\" \r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes =\r\n{\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>\r\n{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=yzPlWAwR0SwSDF54xhbd85Brq7EzygrL`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => \r\n        {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n    \r\n    return gifs;\r\n}","//Mirar animaciones => https://animate.style/\r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt= {title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category } ) => {\r\n\r\n    const {data:images, loading} =  useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img =>\r\n                    (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n//El use al principio del nombre indica que es un use.\r\nexport const useFetchGifs = ( category ) =>\r\n{\r\n    //El estado inicial es un objeto vacío.\r\n    const [state, setstate] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        });\r\n\r\n        //El segundo parámetro son las dependencias. \r\n        //si se deja vacío, le indica que solo se ejecute la primera vez\r\n        //Al ponerle category, vuelve a disparar la petición http, cuando la categoría cambia. \r\n        //Llamando a la API de nuevo al cambiar la categoría.\r\n        //Los efectos no pueden ser async\r\n        useEffect( ()=> \r\n        {\r\n            console.log(category);\r\n            getGifs(category)\r\n            .then( imgs=>\r\n                {\r\n                    setTimeout(function(){\r\n                        setstate({\r\n                            data: imgs,\r\n                            loading: false,\r\n                        });\r\n                    },3000);\r\n                    \r\n                });\r\n\r\n        }, [category]);\r\n\r\n        //{ data: [], loading: true;}\r\n        return state;\r\n}","//LEER:\r\n//https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76\r\n//https://es.reactjs.org/docs/faq-structure.html\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => \r\n{\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () =>\r\n    // {\r\n    //     // setCategories([...categories, 'HunterXHunter']);\r\n    //     setCategories(cats => [...cats, 'HunterXHunter']);\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr />\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n            <ol>\r\n                { \r\n                    categories.map(category => \r\n                    (\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//GifExpertApp con un h2 quew diga G"],"sourceRoot":""}